# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NX7EoITSKJmzaQWK7iU2O5YIxAQHLi-Z
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import io

# Load the trained U-Net model
model = tf.keras.models.load_model('unet_model.h5', compile=False)

# Prediction function
def preprocess_image(image):
    image = image.resize((128, 128))  # Resize to model input
    image = np.array(image) / 255.0  # Normalize
    image = image.astype(np.float32)
    return np.expand_dims(image, axis=0)  # Add batch dim

def predict_mask(image):
    pred = model.predict(image)
    pred_mask = tf.argmax(pred, axis=-1)
    pred_mask = pred_mask[0]
    return tf.cast(pred_mask, tf.uint8).numpy()

# Streamlit UI
st.title("Semantic Segmentation App (U-Net) ðŸ§ ")

uploaded_file = st.file_uploader("Upload an image", type=['jpg', 'png', 'jpeg'])

if uploaded_file:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption='Uploaded Image', use_column_width=True)

    with st.spinner("Predicting..."):
        input_tensor = preprocess_image(image)
        mask = predict_mask(input_tensor)

        # Convert mask to PIL Image
        mask_img = Image.fromarray(mask * 127)  # Scale for visibility
        st.image(mask_img, caption="Predicted Mask", use_column_width=True)